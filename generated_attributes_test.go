package nodx_test

// Code generated by NodX. DO NOT EDIT.

import (
	"fmt"
	nodx "github.com/nodxdev/nodxgo"
)

func ExampleAccept() {
	node := nodx.Accept("value")
	fmt.Println(node)
	// Output: accept="value"
}

func ExampleAcceptCharset() {
	node := nodx.AcceptCharset("value")
	fmt.Println(node)
	// Output: accept-charset="value"
}

func ExampleAccesskey() {
	node := nodx.Accesskey("value")
	fmt.Println(node)
	// Output: accesskey="value"
}

func ExampleAction() {
	node := nodx.Action("value")
	fmt.Println(node)
	// Output: action="value"
}

func ExampleAlign() {
	node := nodx.Align("value")
	fmt.Println(node)
	// Output: align="value"
}

func ExampleAllow() {
	node := nodx.Allow("value")
	fmt.Println(node)
	// Output: allow="value"
}

func ExampleAlt() {
	node := nodx.Alt("value")
	fmt.Println(node)
	// Output: alt="value"
}

func ExampleAsync() {
	node := nodx.Async("value")
	fmt.Println(node)
	// Output: async="value"
}

func ExampleAutocapitalize() {
	node := nodx.Autocapitalize("value")
	fmt.Println(node)
	// Output: autocapitalize="value"
}

func ExampleAutocomplete() {
	node := nodx.Autocomplete("value")
	fmt.Println(node)
	// Output: autocomplete="value"
}

func ExampleAutofocus() {
	node := nodx.Autofocus("value")
	fmt.Println(node)
	// Output: autofocus="value"
}

func ExampleAutoplay() {
	node := nodx.Autoplay("value")
	fmt.Println(node)
	// Output: autoplay="value"
}

func ExampleBackground() {
	node := nodx.Background("value")
	fmt.Println(node)
	// Output: background="value"
}

func ExampleBgcolor() {
	node := nodx.Bgcolor("value")
	fmt.Println(node)
	// Output: bgcolor="value"
}

func ExampleBorder() {
	node := nodx.Border("value")
	fmt.Println(node)
	// Output: border="value"
}

func ExampleBuffered() {
	node := nodx.Buffered("value")
	fmt.Println(node)
	// Output: buffered="value"
}

func ExampleCapture() {
	node := nodx.Capture("value")
	fmt.Println(node)
	// Output: capture="value"
}

func ExampleChallenge() {
	node := nodx.Challenge("value")
	fmt.Println(node)
	// Output: challenge="value"
}

func ExampleCharset() {
	node := nodx.Charset("value")
	fmt.Println(node)
	// Output: charset="value"
}

func ExampleChecked() {
	node := nodx.Checked("value")
	fmt.Println(node)
	// Output: checked="value"
}

func ExampleCiteAttr() {
	node := nodx.CiteAttr("value")
	fmt.Println(node)
	// Output: cite="value"
}

func ExampleClass() {
	node := nodx.Class("value")
	fmt.Println(node)
	// Output: class="value"
}

func ExampleCodeAttr() {
	node := nodx.CodeAttr("value")
	fmt.Println(node)
	// Output: code="value"
}

func ExampleCodebase() {
	node := nodx.Codebase("value")
	fmt.Println(node)
	// Output: codebase="value"
}

func ExampleColor() {
	node := nodx.Color("value")
	fmt.Println(node)
	// Output: color="value"
}

func ExampleCols() {
	node := nodx.Cols("value")
	fmt.Println(node)
	// Output: cols="value"
}

func ExampleColspan() {
	node := nodx.Colspan("value")
	fmt.Println(node)
	// Output: colspan="value"
}

func ExampleContent() {
	node := nodx.Content("value")
	fmt.Println(node)
	// Output: content="value"
}

func ExampleContenteditable() {
	node := nodx.Contenteditable("value")
	fmt.Println(node)
	// Output: contenteditable="value"
}

func ExampleContextmenu() {
	node := nodx.Contextmenu("value")
	fmt.Println(node)
	// Output: contextmenu="value"
}

func ExampleControls() {
	node := nodx.Controls("value")
	fmt.Println(node)
	// Output: controls="value"
}

func ExampleCoords() {
	node := nodx.Coords("value")
	fmt.Println(node)
	// Output: coords="value"
}

func ExampleCrossorigin() {
	node := nodx.Crossorigin("value")
	fmt.Println(node)
	// Output: crossorigin="value"
}

func ExampleCsp() {
	node := nodx.Csp("value")
	fmt.Println(node)
	// Output: csp="value"
}

func ExampleDataAttr() {
	node := nodx.DataAttr("value")
	fmt.Println(node)
	// Output: data="value"
}

func ExampleDatetime() {
	node := nodx.Datetime("value")
	fmt.Println(node)
	// Output: datetime="value"
}

func ExampleDecoding() {
	node := nodx.Decoding("value")
	fmt.Println(node)
	// Output: decoding="value"
}

func ExampleDefault() {
	node := nodx.Default("value")
	fmt.Println(node)
	// Output: default="value"
}

func ExampleDefer() {
	node := nodx.Defer("value")
	fmt.Println(node)
	// Output: defer="value"
}

func ExampleDirAttr() {
	node := nodx.DirAttr("value")
	fmt.Println(node)
	// Output: dir="value"
}

func ExampleDirname() {
	node := nodx.Dirname("value")
	fmt.Println(node)
	// Output: dirname="value"
}

func ExampleDisabled() {
	node := nodx.Disabled("value")
	fmt.Println(node)
	// Output: disabled="value"
}

func ExampleDownload() {
	node := nodx.Download("value")
	fmt.Println(node)
	// Output: download="value"
}

func ExampleDraggable() {
	node := nodx.Draggable("value")
	fmt.Println(node)
	// Output: draggable="value"
}

func ExampleEnctype() {
	node := nodx.Enctype("value")
	fmt.Println(node)
	// Output: enctype="value"
}

func ExampleEnterkeyhint() {
	node := nodx.Enterkeyhint("value")
	fmt.Println(node)
	// Output: enterkeyhint="value"
}

func ExampleFor() {
	node := nodx.For("value")
	fmt.Println(node)
	// Output: for="value"
}

func ExampleFormAttr() {
	node := nodx.FormAttr("value")
	fmt.Println(node)
	// Output: form="value"
}

func ExampleFormaction() {
	node := nodx.Formaction("value")
	fmt.Println(node)
	// Output: formaction="value"
}

func ExampleFormenctype() {
	node := nodx.Formenctype("value")
	fmt.Println(node)
	// Output: formenctype="value"
}

func ExampleFormmethod() {
	node := nodx.Formmethod("value")
	fmt.Println(node)
	// Output: formmethod="value"
}

func ExampleFormnovalidate() {
	node := nodx.Formnovalidate("value")
	fmt.Println(node)
	// Output: formnovalidate="value"
}

func ExampleFormtarget() {
	node := nodx.Formtarget("value")
	fmt.Println(node)
	// Output: formtarget="value"
}

func ExampleHeaders() {
	node := nodx.Headers("value")
	fmt.Println(node)
	// Output: headers="value"
}

func ExampleHeight() {
	node := nodx.Height("value")
	fmt.Println(node)
	// Output: height="value"
}

func ExampleHidden() {
	node := nodx.Hidden("value")
	fmt.Println(node)
	// Output: hidden="value"
}

func ExampleHigh() {
	node := nodx.High("value")
	fmt.Println(node)
	// Output: high="value"
}

func ExampleHref() {
	node := nodx.Href("value")
	fmt.Println(node)
	// Output: href="value"
}

func ExampleHreflang() {
	node := nodx.Hreflang("value")
	fmt.Println(node)
	// Output: hreflang="value"
}

func ExampleHttpEquiv() {
	node := nodx.HttpEquiv("value")
	fmt.Println(node)
	// Output: http-equiv="value"
}

func ExampleIcon() {
	node := nodx.Icon("value")
	fmt.Println(node)
	// Output: icon="value"
}

func ExampleId() {
	node := nodx.Id("value")
	fmt.Println(node)
	// Output: id="value"
}

func ExampleImportance() {
	node := nodx.Importance("value")
	fmt.Println(node)
	// Output: importance="value"
}

func ExampleIntegrity() {
	node := nodx.Integrity("value")
	fmt.Println(node)
	// Output: integrity="value"
}

func ExampleIsmap() {
	node := nodx.Ismap("value")
	fmt.Println(node)
	// Output: ismap="value"
}

func ExampleItemprop() {
	node := nodx.Itemprop("value")
	fmt.Println(node)
	// Output: itemprop="value"
}

func ExampleKeytype() {
	node := nodx.Keytype("value")
	fmt.Println(node)
	// Output: keytype="value"
}

func ExampleKind() {
	node := nodx.Kind("value")
	fmt.Println(node)
	// Output: kind="value"
}

func ExampleLabelAttr() {
	node := nodx.LabelAttr("value")
	fmt.Println(node)
	// Output: label="value"
}

func ExampleLang() {
	node := nodx.Lang("value")
	fmt.Println(node)
	// Output: lang="value"
}

func ExampleLanguage() {
	node := nodx.Language("value")
	fmt.Println(node)
	// Output: language="value"
}

func ExampleLoading() {
	node := nodx.Loading("value")
	fmt.Println(node)
	// Output: loading="value"
}

func ExampleList() {
	node := nodx.List("value")
	fmt.Println(node)
	// Output: list="value"
}

func ExampleLoop() {
	node := nodx.Loop("value")
	fmt.Println(node)
	// Output: loop="value"
}

func ExampleLow() {
	node := nodx.Low("value")
	fmt.Println(node)
	// Output: low="value"
}

func ExampleManifest() {
	node := nodx.Manifest("value")
	fmt.Println(node)
	// Output: manifest="value"
}

func ExampleMax() {
	node := nodx.Max("value")
	fmt.Println(node)
	// Output: max="value"
}

func ExampleMaxlength() {
	node := nodx.Maxlength("value")
	fmt.Println(node)
	// Output: maxlength="value"
}

func ExampleMedia() {
	node := nodx.Media("value")
	fmt.Println(node)
	// Output: media="value"
}

func ExampleMethod() {
	node := nodx.Method("value")
	fmt.Println(node)
	// Output: method="value"
}

func ExampleMin() {
	node := nodx.Min("value")
	fmt.Println(node)
	// Output: min="value"
}

func ExampleMinlength() {
	node := nodx.Minlength("value")
	fmt.Println(node)
	// Output: minlength="value"
}

func ExampleMultiple() {
	node := nodx.Multiple("value")
	fmt.Println(node)
	// Output: multiple="value"
}

func ExampleMuted() {
	node := nodx.Muted("value")
	fmt.Println(node)
	// Output: muted="value"
}

func ExampleName() {
	node := nodx.Name("value")
	fmt.Println(node)
	// Output: name="value"
}

func ExampleNomodule() {
	node := nodx.Nomodule("value")
	fmt.Println(node)
	// Output: nomodule="value"
}

func ExampleNonce() {
	node := nodx.Nonce("value")
	fmt.Println(node)
	// Output: nonce="value"
}

func ExampleNovalidate() {
	node := nodx.Novalidate("value")
	fmt.Println(node)
	// Output: novalidate="value"
}

func ExampleOpen() {
	node := nodx.Open("value")
	fmt.Println(node)
	// Output: open="value"
}

func ExampleOptimum() {
	node := nodx.Optimum("value")
	fmt.Println(node)
	// Output: optimum="value"
}

func ExamplePattern() {
	node := nodx.Pattern("value")
	fmt.Println(node)
	// Output: pattern="value"
}

func ExamplePing() {
	node := nodx.Ping("value")
	fmt.Println(node)
	// Output: ping="value"
}

func ExamplePlaceholder() {
	node := nodx.Placeholder("value")
	fmt.Println(node)
	// Output: placeholder="value"
}

func ExamplePlaysinline() {
	node := nodx.Playsinline("value")
	fmt.Println(node)
	// Output: playsinline="value"
}

func ExamplePoster() {
	node := nodx.Poster("value")
	fmt.Println(node)
	// Output: poster="value"
}

func ExamplePreload() {
	node := nodx.Preload("value")
	fmt.Println(node)
	// Output: preload="value"
}

func ExampleReadonly() {
	node := nodx.Readonly("value")
	fmt.Println(node)
	// Output: readonly="value"
}

func ExampleReferrerpolicy() {
	node := nodx.Referrerpolicy("value")
	fmt.Println(node)
	// Output: referrerpolicy="value"
}

func ExampleRel() {
	node := nodx.Rel("value")
	fmt.Println(node)
	// Output: rel="value"
}

func ExampleRequired() {
	node := nodx.Required("value")
	fmt.Println(node)
	// Output: required="value"
}

func ExampleReversed() {
	node := nodx.Reversed("value")
	fmt.Println(node)
	// Output: reversed="value"
}

func ExampleRows() {
	node := nodx.Rows("value")
	fmt.Println(node)
	// Output: rows="value"
}

func ExampleRowspan() {
	node := nodx.Rowspan("value")
	fmt.Println(node)
	// Output: rowspan="value"
}

func ExampleSandbox() {
	node := nodx.Sandbox("value")
	fmt.Println(node)
	// Output: sandbox="value"
}

func ExampleScope() {
	node := nodx.Scope("value")
	fmt.Println(node)
	// Output: scope="value"
}

func ExampleScoped() {
	node := nodx.Scoped("value")
	fmt.Println(node)
	// Output: scoped="value"
}

func ExampleSelected() {
	node := nodx.Selected("value")
	fmt.Println(node)
	// Output: selected="value"
}

func ExampleShape() {
	node := nodx.Shape("value")
	fmt.Println(node)
	// Output: shape="value"
}

func ExampleSize() {
	node := nodx.Size("value")
	fmt.Println(node)
	// Output: size="value"
}

func ExampleSizes() {
	node := nodx.Sizes("value")
	fmt.Println(node)
	// Output: sizes="value"
}

func ExampleSlotAttr() {
	node := nodx.SlotAttr("value")
	fmt.Println(node)
	// Output: slot="value"
}

func ExampleSpanAttr() {
	node := nodx.SpanAttr("value")
	fmt.Println(node)
	// Output: span="value"
}

func ExampleSpellcheck() {
	node := nodx.Spellcheck("value")
	fmt.Println(node)
	// Output: spellcheck="value"
}

func ExampleSrc() {
	node := nodx.Src("value")
	fmt.Println(node)
	// Output: src="value"
}

func ExampleSrcdoc() {
	node := nodx.Srcdoc("value")
	fmt.Println(node)
	// Output: srcdoc="value"
}

func ExampleSrclang() {
	node := nodx.Srclang("value")
	fmt.Println(node)
	// Output: srclang="value"
}

func ExampleSrcset() {
	node := nodx.Srcset("value")
	fmt.Println(node)
	// Output: srcset="value"
}

func ExampleStart() {
	node := nodx.Start("value")
	fmt.Println(node)
	// Output: start="value"
}

func ExampleStep() {
	node := nodx.Step("value")
	fmt.Println(node)
	// Output: step="value"
}

func ExampleStyleAttr() {
	node := nodx.StyleAttr("value")
	fmt.Println(node)
	// Output: style="value"
}

func ExampleSummaryAttr() {
	node := nodx.SummaryAttr("value")
	fmt.Println(node)
	// Output: summary="value"
}

func ExampleTabindex() {
	node := nodx.Tabindex("value")
	fmt.Println(node)
	// Output: tabindex="value"
}

func ExampleTarget() {
	node := nodx.Target("value")
	fmt.Println(node)
	// Output: target="value"
}

func ExampleTitleAttr() {
	node := nodx.TitleAttr("value")
	fmt.Println(node)
	// Output: title="value"
}

func ExampleTranslate() {
	node := nodx.Translate("value")
	fmt.Println(node)
	// Output: translate="value"
}

func ExampleType() {
	node := nodx.Type("value")
	fmt.Println(node)
	// Output: type="value"
}

func ExampleUsemap() {
	node := nodx.Usemap("value")
	fmt.Println(node)
	// Output: usemap="value"
}

func ExampleValue() {
	node := nodx.Value("value")
	fmt.Println(node)
	// Output: value="value"
}

func ExampleWidth() {
	node := nodx.Width("value")
	fmt.Println(node)
	// Output: width="value"
}

func ExampleWrap() {
	node := nodx.Wrap("value")
	fmt.Println(node)
	// Output: wrap="value"
}

func ExampleAria() {
	node := nodx.Aria("key", "value")
	fmt.Println(node)
	// Output: aria-key="value"
}

func ExampleData() {
	node := nodx.Data("key", "value")
	fmt.Println(node)
	// Output: data-key="value"
}

func ExampleRole() {
	node := nodx.Role("value")
	fmt.Println(node)
	// Output: role="value"
}
