package nodx

// Code generated by NodX. DO NOT EDIT.

// A Defines a hyperlink.
//
// Output: <a ...>...</a>
func A(children ...Node) Node {
	return El("a", children...)
}

// Abbr Defines an abbreviation or acronym.
//
// Output: <abbr ...>...</abbr>
func Abbr(children ...Node) Node {
	return El("abbr", children...)
}

// Address Defines contact information for the author/owner of a document.
//
// Output: <address ...>...</address>
func Address(children ...Node) Node {
	return El("address", children...)
}

// Applet Defines an embedded applet (deprecated).
//
// Output: <applet ...>...</applet>
func Applet(children ...Node) Node {
	return El("applet", children...)
}

// Area Defines an area inside an image-map.
//
// Output: <area ...>
func Area(children ...Node) Node {
	return ElVoid("area", children...)
}

// Article Defines an article.
//
// Output: <article ...>...</article>
func Article(children ...Node) Node {
	return El("article", children...)
}

// Aside Defines content aside from the page content.
//
// Output: <aside ...>...</aside>
func Aside(children ...Node) Node {
	return El("aside", children...)
}

// Audio Defines embedded sound content.
//
// Output: <audio ...>...</audio>
func Audio(children ...Node) Node {
	return El("audio", children...)
}

// B Defines bold text.
//
// Output: <b ...>...</b>
func B(children ...Node) Node {
	return El("b", children...)
}

// Base Specifies the base URL for all relative URLs in a document.
//
// Output: <base ...>
func Base(children ...Node) Node {
	return ElVoid("base", children...)
}

// Basefont Specifies a default color, size, and font for all text in a document (deprecated).
//
// Output: <basefont ...>...</basefont>
func Basefont(children ...Node) Node {
	return El("basefont", children...)
}

// Bdi Isolates a part of text that might be formatted in a different direction from other text.
//
// Output: <bdi ...>...</bdi>
func Bdi(children ...Node) Node {
	return El("bdi", children...)
}

// Bdo Overrides the current text direction.
//
// Output: <bdo ...>...</bdo>
func Bdo(children ...Node) Node {
	return El("bdo", children...)
}

// Blockquote Defines a section that is quoted from another source.
//
// Output: <blockquote ...>...</blockquote>
func Blockquote(children ...Node) Node {
	return El("blockquote", children...)
}

// Body Defines the body of the document.
//
// Output: <body ...>...</body>
func Body(children ...Node) Node {
	return El("body", children...)
}

// Br Inserts a single line break.
//
// Output: <br ...>
func Br(children ...Node) Node {
	return ElVoid("br", children...)
}

// Button Defines a clickable button.
//
// Output: <button ...>...</button>
func Button(children ...Node) Node {
	return El("button", children...)
}

// Canvas Used to draw graphics on the fly via scripting.
//
// Output: <canvas ...>...</canvas>
func Canvas(children ...Node) Node {
	return El("canvas", children...)
}

// Caption Defines a table caption.
//
// Output: <caption ...>...</caption>
func Caption(children ...Node) Node {
	return El("caption", children...)
}

// Center Defines centered text (deprecated).
//
// Output: <center ...>...</center>
func Center(children ...Node) Node {
	return El("center", children...)
}

// CiteEl Defines the title of a work.
//
// Output: <cite ...>...</cite>
func CiteEl(children ...Node) Node {
	return El("cite", children...)
}

// CodeEl Defines a piece of computer code.
//
// Output: <code ...>...</code>
func CodeEl(children ...Node) Node {
	return El("code", children...)
}

// Col Specifies column properties for each column within a colgroup element.
//
// Output: <col ...>
func Col(children ...Node) Node {
	return ElVoid("col", children...)
}

// Colgroup Specifies a group of one or more columns in a table for formatting.
//
// Output: <colgroup ...>...</colgroup>
func Colgroup(children ...Node) Node {
	return El("colgroup", children...)
}

// DataEl Links the given content with a machine-readable translation.
//
// Output: <data ...>...</data>
func DataEl(children ...Node) Node {
	return El("data", children...)
}

// Datalist Specifies a list of pre-defined options for input controls.
//
// Output: <datalist ...>...</datalist>
func Datalist(children ...Node) Node {
	return El("datalist", children...)
}

// Dd Defines a description/value of a term in a description list.
//
// Output: <dd ...>...</dd>
func Dd(children ...Node) Node {
	return El("dd", children...)
}

// Del Defines text that has been deleted from a document.
//
// Output: <del ...>...</del>
func Del(children ...Node) Node {
	return El("del", children...)
}

// Details Defines additional details that the user can view or hide.
//
// Output: <details ...>...</details>
func Details(children ...Node) Node {
	return El("details", children...)
}

// Dfn Represents the defining instance of a term.
//
// Output: <dfn ...>...</dfn>
func Dfn(children ...Node) Node {
	return El("dfn", children...)
}

// Dialog Defines a dialog box or window.
//
// Output: <dialog ...>...</dialog>
func Dialog(children ...Node) Node {
	return El("dialog", children...)
}

// DirEl Defines a directory list (deprecated).
//
// Output: <dir ...>...</dir>
func DirEl(children ...Node) Node {
	return El("dir", children...)
}

// Div Defines a section or a division in a document.
//
// Output: <div ...>...</div>
func Div(children ...Node) Node {
	return El("div", children...)
}

// Dl Defines a description list.
//
// Output: <dl ...>...</dl>
func Dl(children ...Node) Node {
	return El("dl", children...)
}

// Dt Defines a term/name in a description list.
//
// Output: <dt ...>...</dt>
func Dt(children ...Node) Node {
	return El("dt", children...)
}

// Em Defines emphasized text.
//
// Output: <em ...>...</em>
func Em(children ...Node) Node {
	return El("em", children...)
}

// Embed Defines a container for an external application or interactive content.
//
// Output: <embed ...>
func Embed(children ...Node) Node {
	return ElVoid("embed", children...)
}

// Fieldset Groups related elements in a form.
//
// Output: <fieldset ...>...</fieldset>
func Fieldset(children ...Node) Node {
	return El("fieldset", children...)
}

// Figcaption Defines a caption for a figure element.
//
// Output: <figcaption ...>...</figcaption>
func Figcaption(children ...Node) Node {
	return El("figcaption", children...)
}

// Figure Specifies self-contained content.
//
// Output: <figure ...>...</figure>
func Figure(children ...Node) Node {
	return El("figure", children...)
}

// Font Defines font, color, and size for text (deprecated).
//
// Output: <font ...>...</font>
func Font(children ...Node) Node {
	return El("font", children...)
}

// Footer Defines a footer for a document or section.
//
// Output: <footer ...>...</footer>
func Footer(children ...Node) Node {
	return El("footer", children...)
}

// FormEl Defines an HTML form for user input.
//
// Output: <form ...>...</form>
func FormEl(children ...Node) Node {
	return El("form", children...)
}

// Frame Defines a window (a frame) in a frameset (deprecated).
//
// Output: <frame ...>...</frame>
func Frame(children ...Node) Node {
	return El("frame", children...)
}

// Frameset Defines a set of frames (deprecated).
//
// Output: <frameset ...>...</frameset>
func Frameset(children ...Node) Node {
	return El("frameset", children...)
}

// H1 Defines HTML headings level 1.
//
// Output: <h1 ...>...</h1>
func H1(children ...Node) Node {
	return El("h1", children...)
}

// H2 Defines HTML headings level 2.
//
// Output: <h2 ...>...</h2>
func H2(children ...Node) Node {
	return El("h2", children...)
}

// H3 Defines HTML headings level 3.
//
// Output: <h3 ...>...</h3>
func H3(children ...Node) Node {
	return El("h3", children...)
}

// H4 Defines HTML headings level 4.
//
// Output: <h4 ...>...</h4>
func H4(children ...Node) Node {
	return El("h4", children...)
}

// H5 Defines HTML headings level 5.
//
// Output: <h5 ...>...</h5>
func H5(children ...Node) Node {
	return El("h5", children...)
}

// H6 Defines HTML headings level 6.
//
// Output: <h6 ...>...</h6>
func H6(children ...Node) Node {
	return El("h6", children...)
}

// Head Contains metadata/information for the document.
//
// Output: <head ...>...</head>
func Head(children ...Node) Node {
	return El("head", children...)
}

// Header Defines a header for a document or section.
//
// Output: <header ...>...</header>
func Header(children ...Node) Node {
	return El("header", children...)
}

// Hr Defines a thematic change in the content.
//
// Output: <hr ...>
func Hr(children ...Node) Node {
	return ElVoid("hr", children...)
}

// Html Defines the root of an HTML document.
//
// Output: <html ...>...</html>
func Html(children ...Node) Node {
	return El("html", children...)
}

// I Defines a part of text in an alternate voice or mood.
//
// Output: <i ...>...</i>
func I(children ...Node) Node {
	return El("i", children...)
}

// Iframe Defines an inline frame.
//
// Output: <iframe ...>...</iframe>
func Iframe(children ...Node) Node {
	return El("iframe", children...)
}

// Img Defines an image.
//
// Output: <img ...>
func Img(children ...Node) Node {
	return ElVoid("img", children...)
}

// Input Defines an input control.
//
// Output: <input ...>
func Input(children ...Node) Node {
	return ElVoid("input", children...)
}

// Ins Defines a text that has been inserted into a document.
//
// Output: <ins ...>...</ins>
func Ins(children ...Node) Node {
	return El("ins", children...)
}

// Kbd Defines keyboard input.
//
// Output: <kbd ...>...</kbd>
func Kbd(children ...Node) Node {
	return El("kbd", children...)
}

// LabelEl Defines a label for an input element.
//
// Output: <label ...>...</label>
func LabelEl(children ...Node) Node {
	return El("label", children...)
}

// Legend Defines a caption for a fieldset element.
//
// Output: <legend ...>...</legend>
func Legend(children ...Node) Node {
	return El("legend", children...)
}

// Li Defines a list item.
//
// Output: <li ...>...</li>
func Li(children ...Node) Node {
	return El("li", children...)
}

// Link Defines the relationship between a document and an external resource.
//
// Output: <link ...>
func Link(children ...Node) Node {
	return ElVoid("link", children...)
}

// Main Specifies the main content of a document.
//
// Output: <main ...>...</main>
func Main(children ...Node) Node {
	return El("main", children...)
}

// MapEl Defines an image-map.
//
// Output: <map ...>...</map>
func MapEl(children ...Node) Node {
	return El("map", children...)
}

// Mark Defines marked or highlighted text.
//
// Output: <mark ...>...</mark>
func Mark(children ...Node) Node {
	return El("mark", children...)
}

// Meta Defines metadata about an HTML document.
//
// Output: <meta ...>
func Meta(children ...Node) Node {
	return ElVoid("meta", children...)
}

// Meter Defines a scalar measurement within a known range.
//
// Output: <meter ...>...</meter>
func Meter(children ...Node) Node {
	return El("meter", children...)
}

// Nav Defines navigation links.
//
// Output: <nav ...>...</nav>
func Nav(children ...Node) Node {
	return El("nav", children...)
}

// Noframes Defines an alternate content for users that do not support frames (deprecated).
//
// Output: <noframes ...>...</noframes>
func Noframes(children ...Node) Node {
	return El("noframes", children...)
}

// Noscript Defines an alternate content for users that do not support client-side scripts.
//
// Output: <noscript ...>...</noscript>
func Noscript(children ...Node) Node {
	return El("noscript", children...)
}

// Object Defines an embedded object.
//
// Output: <object ...>...</object>
func Object(children ...Node) Node {
	return El("object", children...)
}

// Ol Defines an ordered list.
//
// Output: <ol ...>...</ol>
func Ol(children ...Node) Node {
	return El("ol", children...)
}

// Optgroup Defines a group of related options in a drop-down list.
//
// Output: <optgroup ...>...</optgroup>
func Optgroup(children ...Node) Node {
	return El("optgroup", children...)
}

// Option Defines an option in a drop-down list.
//
// Output: <option ...>...</option>
func Option(children ...Node) Node {
	return El("option", children...)
}

// Output Defines the result of a calculation.
//
// Output: <output ...>...</output>
func Output(children ...Node) Node {
	return El("output", children...)
}

// P Defines a paragraph.
//
// Output: <p ...>...</p>
func P(children ...Node) Node {
	return El("p", children...)
}

// Param Defines a parameter for an object.
//
// Output: <param ...>
func Param(children ...Node) Node {
	return ElVoid("param", children...)
}

// Picture Defines a container for multiple image resources.
//
// Output: <picture ...>...</picture>
func Picture(children ...Node) Node {
	return El("picture", children...)
}

// Pre Defines preformatted text.
//
// Output: <pre ...>...</pre>
func Pre(children ...Node) Node {
	return El("pre", children...)
}

// Progress Represents the progress of a task.
//
// Output: <progress ...>...</progress>
func Progress(children ...Node) Node {
	return El("progress", children...)
}

// Q Defines a short quotation.
//
// Output: <q ...>...</q>
func Q(children ...Node) Node {
	return El("q", children...)
}

// Rb Used to delimit the base text component of a ruby annotation.
//
// Output: <rb ...>...</rb>
func Rb(children ...Node) Node {
	return El("rb", children...)
}

// Rp Defines what to show in browsers that do not support ruby annotations.
//
// Output: <rp ...>...</rp>
func Rp(children ...Node) Node {
	return El("rp", children...)
}

// Rt Defines an explanation/pronunciation of characters (for East Asian typography).
//
// Output: <rt ...>...</rt>
func Rt(children ...Node) Node {
	return El("rt", children...)
}

// Rtc Defines a ruby text container for multiple rt elements.
//
// Output: <rtc ...>...</rtc>
func Rtc(children ...Node) Node {
	return El("rtc", children...)
}

// Ruby Defines a ruby annotation.
//
// Output: <ruby ...>...</ruby>
func Ruby(children ...Node) Node {
	return El("ruby", children...)
}

// S Defines text that is no longer correct.
//
// Output: <s ...>...</s>
func S(children ...Node) Node {
	return El("s", children...)
}

// Samp Defines sample output from a computer program.
//
// Output: <samp ...>...</samp>
func Samp(children ...Node) Node {
	return El("samp", children...)
}

// Script Defines a client-side script.
//
// Output: <script ...>...</script>
func Script(children ...Node) Node {
	return El("script", children...)
}

// Section Defines a section in a document.
//
// Output: <section ...>...</section>
func Section(children ...Node) Node {
	return El("section", children...)
}

// Select Defines a drop-down list.
//
// Output: <select ...>...</select>
func Select(children ...Node) Node {
	return El("select", children...)
}

// SlotEl Defines a placeholder inside a web component.
//
// Output: <slot ...>...</slot>
func SlotEl(children ...Node) Node {
	return El("slot", children...)
}

// Small Defines smaller text.
//
// Output: <small ...>...</small>
func Small(children ...Node) Node {
	return El("small", children...)
}

// Source Defines multiple media resources for media elements.
//
// Output: <source ...>
func Source(children ...Node) Node {
	return ElVoid("source", children...)
}

// SpanEl Defines a section in a document.
//
// Output: <span ...>...</span>
func SpanEl(children ...Node) Node {
	return El("span", children...)
}

// Strike Defines strikethrough text (deprecated).
//
// Output: <strike ...>...</strike>
func Strike(children ...Node) Node {
	return El("strike", children...)
}

// Strong Defines important text.
//
// Output: <strong ...>...</strong>
func Strong(children ...Node) Node {
	return El("strong", children...)
}

// StyleEl Defines style information for a document.
//
// Output: <style ...>...</style>
func StyleEl(children ...Node) Node {
	return El("style", children...)
}

// Sub Defines subscripted text.
//
// Output: <sub ...>...</sub>
func Sub(children ...Node) Node {
	return El("sub", children...)
}

// SummaryEl Defines a visible heading for a details element.
//
// Output: <summary ...>...</summary>
func SummaryEl(children ...Node) Node {
	return El("summary", children...)
}

// Sup Defines superscripted text.
//
// Output: <sup ...>...</sup>
func Sup(children ...Node) Node {
	return El("sup", children...)
}

// Svg Defines a container for SVG graphics.
//
// Output: <svg ...>...</svg>
func Svg(children ...Node) Node {
	return El("svg", children...)
}

// Table Defines a table.
//
// Output: <table ...>...</table>
func Table(children ...Node) Node {
	return El("table", children...)
}

// Tbody Groups the body content in a table.
//
// Output: <tbody ...>...</tbody>
func Tbody(children ...Node) Node {
	return El("tbody", children...)
}

// Td Defines a cell in a table.
//
// Output: <td ...>...</td>
func Td(children ...Node) Node {
	return El("td", children...)
}

// Template Defines a template.
//
// Output: <template ...>...</template>
func Template(children ...Node) Node {
	return El("template", children...)
}

// Textarea Defines a multiline input control.
//
// Output: <textarea ...>...</textarea>
func Textarea(children ...Node) Node {
	return El("textarea", children...)
}

// Tfoot Groups the footer content in a table.
//
// Output: <tfoot ...>...</tfoot>
func Tfoot(children ...Node) Node {
	return El("tfoot", children...)
}

// Th Defines a header cell in a table.
//
// Output: <th ...>...</th>
func Th(children ...Node) Node {
	return El("th", children...)
}

// Thead Groups the header content in a table.
//
// Output: <thead ...>...</thead>
func Thead(children ...Node) Node {
	return El("thead", children...)
}

// Time Defines a specific time.
//
// Output: <time ...>...</time>
func Time(children ...Node) Node {
	return El("time", children...)
}

// TitleEl Defines a title for the document.
//
// Output: <title ...>...</title>
func TitleEl(children ...Node) Node {
	return El("title", children...)
}

// Tr Defines a row in a table.
//
// Output: <tr ...>...</tr>
func Tr(children ...Node) Node {
	return El("tr", children...)
}

// Track Defines text tracks for media elements.
//
// Output: <track ...>
func Track(children ...Node) Node {
	return ElVoid("track", children...)
}

// Tt Defines teletype text (deprecated).
//
// Output: <tt ...>...</tt>
func Tt(children ...Node) Node {
	return El("tt", children...)
}

// U Defines text that should be stylistically different from normal text.
//
// Output: <u ...>...</u>
func U(children ...Node) Node {
	return El("u", children...)
}

// Ul Defines an unordered list.
//
// Output: <ul ...>...</ul>
func Ul(children ...Node) Node {
	return El("ul", children...)
}

// Var Defines a variable.
//
// Output: <var ...>...</var>
func Var(children ...Node) Node {
	return El("var", children...)
}

// Video Defines embedded video content.
//
// Output: <video ...>...</video>
func Video(children ...Node) Node {
	return El("video", children...)
}

// Wbr Defines a possible line-break.
//
// Output: <wbr ...>
func Wbr(children ...Node) Node {
	return ElVoid("wbr", children...)
}
