package nodx

// Code generated by NodX. DO NOT EDIT.

// Accept Specifies the types of files that the server accepts (only for input type='file').
//
// Output: accept="{value}"
func Accept(value string) Node {
	return Attr("accept", value)
}

// AcceptCharset Specifies the character encodings to be used for form submission.
//
// Output: accept-charset="{value}"
func AcceptCharset(value string) Node {
	return Attr("accept-charset", value)
}

// Accesskey Specifies a shortcut key to activate/focus an element.
//
// Output: accesskey="{value}"
func Accesskey(value string) Node {
	return Attr("accesskey", value)
}

// Action Specifies where to send the form-data when a form is submitted.
//
// Output: action="{value}"
func Action(value string) Node {
	return Attr("action", value)
}

// Align Specifies the alignment of the element's content.
//
// Output: align="{value}"
func Align(value string) Node {
	return Attr("align", value)
}

// Allow Specifies a feature policy for the iframe.
//
// Output: allow="{value}"
func Allow(value string) Node {
	return Attr("allow", value)
}

// Alt Provides alternative text for an image if it cannot be displayed.
//
// Output: alt="{value}"
func Alt(value string) Node {
	return Attr("alt", value)
}

// Async Indicates that the script should be executed asynchronously.
//
// Output: async="{value}"
func Async(value string) Node {
	return Attr("async", value)
}

// Autocapitalize Controls how text input is automatically capitalized.
//
// Output: autocapitalize="{value}"
func Autocapitalize(value string) Node {
	return Attr("autocapitalize", value)
}

// Autocomplete Specifies whether an input field should have autocomplete enabled.
//
// Output: autocomplete="{value}"
func Autocomplete(value string) Node {
	return Attr("autocomplete", value)
}

// Autofocus Specifies that an input field should automatically get focus when the page loads.
//
// Output: autofocus="{value}"
func Autofocus(value string) Node {
	return Attr("autofocus", value)
}

// Autoplay Specifies that the audio/video should start playing as soon as it is ready.
//
// Output: autoplay="{value}"
func Autoplay(value string) Node {
	return Attr("autoplay", value)
}

// Background Specifies a background image for the element.
//
// Output: background="{value}"
func Background(value string) Node {
	return Attr("background", value)
}

// Bgcolor Specifies the background color of an element.
//
// Output: bgcolor="{value}"
func Bgcolor(value string) Node {
	return Attr("bgcolor", value)
}

// Border Specifies the border width.
//
// Output: border="{value}"
func Border(value string) Node {
	return Attr("border", value)
}

// Buffered Contains the time ranges that the media element has buffered.
//
// Output: buffered="{value}"
func Buffered(value string) Node {
	return Attr("buffered", value)
}

// Capture Specifies that the camera should be used for input.
//
// Output: capture="{value}"
func Capture(value string) Node {
	return Attr("capture", value)
}

// Challenge Specifies that the value of the keygen element should be challenged when submitted.
//
// Output: challenge="{value}"
func Challenge(value string) Node {
	return Attr("challenge", value)
}

// Charset Specifies the character encoding.
//
// Output: charset="{value}"
func Charset(value string) Node {
	return Attr("charset", value)
}

// Checked Specifies that an input element should be pre-selected when the page loads.
//
// Output: checked="{value}"
func Checked(value string) Node {
	return Attr("checked", value)
}

// CiteAttr Specifies a URL that explains the quote, or why a text was inserted/deleted.
//
// Output: cite="{value}"
func CiteAttr(value string) Node {
	return Attr("cite", value)
}

// Class Specifies one or more class names for an element.
//
// Output: class="{value}"
func Class(value string) Node {
	return Attr("class", value)
}

// CodeAttr Specifies the URL of the applet's class file to be loaded and executed.
//
// Output: code="{value}"
func CodeAttr(value string) Node {
	return Attr("code", value)
}

// Codebase Specifies the base URL for an applet.
//
// Output: codebase="{value}"
func Codebase(value string) Node {
	return Attr("codebase", value)
}

// Color Specifies the text color of an element.
//
// Output: color="{value}"
func Color(value string) Node {
	return Attr("color", value)
}

// Cols Specifies the visible width of a text area.
//
// Output: cols="{value}"
func Cols(value string) Node {
	return Attr("cols", value)
}

// Colspan Specifies the number of columns a cell should span.
//
// Output: colspan="{value}"
func Colspan(value string) Node {
	return Attr("colspan", value)
}

// Content Gives the value associated with the http-equiv or name attribute.
//
// Output: content="{value}"
func Content(value string) Node {
	return Attr("content", value)
}

// Contenteditable Specifies whether the content of an element is editable.
//
// Output: contenteditable="{value}"
func Contenteditable(value string) Node {
	return Attr("contenteditable", value)
}

// Contextmenu Specifies a context menu for an element.
//
// Output: contextmenu="{value}"
func Contextmenu(value string) Node {
	return Attr("contextmenu", value)
}

// Controls Specifies that audio/video controls should be displayed.
//
// Output: controls="{value}"
func Controls(value string) Node {
	return Attr("controls", value)
}

// Coords Specifies the coordinates of an area in an image-map.
//
// Output: coords="{value}"
func Coords(value string) Node {
	return Attr("coords", value)
}

// Crossorigin Configures the CORS requests for the element's fetched data.
//
// Output: crossorigin="{value}"
func Crossorigin(value string) Node {
	return Attr("crossorigin", value)
}

// Csp Allows specifying a Content Security Policy for the content in the iframe.
//
// Output: csp="{value}"
func Csp(value string) Node {
	return Attr("csp", value)
}

// DataAttr Specifies the URL of the resource to be used by the object.
//
// Output: data="{value}"
func DataAttr(value string) Node {
	return Attr("data", value)
}

// Datetime Specifies the date and time.
//
// Output: datetime="{value}"
func Datetime(value string) Node {
	return Attr("datetime", value)
}

// Decoding Indicates how the browser should load the image.
//
// Output: decoding="{value}"
func Decoding(value string) Node {
	return Attr("decoding", value)
}

// Default Specifies the default track kind.
//
// Output: default="{value}"
func Default(value string) Node {
	return Attr("default", value)
}

// Defer Specifies that the script is executed when the page has finished parsing.
//
// Output: defer="{value}"
func Defer(value string) Node {
	return Attr("defer", value)
}

// DirAttr Specifies the text direction for the content.
//
// Output: dir="{value}"
func DirAttr(value string) Node {
	return Attr("dir", value)
}

// Dirname Enables the submission of the text directionality of an input field.
//
// Output: dirname="{value}"
func Dirname(value string) Node {
	return Attr("dirname", value)
}

// Disabled Specifies that an element should be disabled.
//
// Output: disabled="{value}"
func Disabled(value string) Node {
	return Attr("disabled", value)
}

// Download Specifies that the target will be downloaded when a user clicks on the hyperlink.
//
// Output: download="{value}"
func Download(value string) Node {
	return Attr("download", value)
}

// Draggable Specifies whether an element is draggable or not.
//
// Output: draggable="{value}"
func Draggable(value string) Node {
	return Attr("draggable", value)
}

// Enctype Specifies how the form-data should be encoded when submitting it to the server.
//
// Output: enctype="{value}"
func Enctype(value string) Node {
	return Attr("enctype", value)
}

// Enterkeyhint Specifies what action label to present for the enter key on virtual keyboards.
//
// Output: enterkeyhint="{value}"
func Enterkeyhint(value string) Node {
	return Attr("enterkeyhint", value)
}

// For Specifies which form element a label or output element is bound to.
//
// Output: for="{value}"
func For(value string) Node {
	return Attr("for", value)
}

// FormAttr Specifies the form the element belongs to.
//
// Output: form="{value}"
func FormAttr(value string) Node {
	return Attr("form", value)
}

// Formaction Specifies where to send the form-data when a form is submitted (for input and button elements).
//
// Output: formaction="{value}"
func Formaction(value string) Node {
	return Attr("formaction", value)
}

// Formenctype Specifies how form-data should be encoded (for input and button elements).
//
// Output: formenctype="{value}"
func Formenctype(value string) Node {
	return Attr("formenctype", value)
}

// Formmethod Defines the HTTP method for sending form-data (for input and button elements).
//
// Output: formmethod="{value}"
func Formmethod(value string) Node {
	return Attr("formmethod", value)
}

// Formnovalidate Defines that form elements should not be validated when submitted.
//
// Output: formnovalidate="{value}"
func Formnovalidate(value string) Node {
	return Attr("formnovalidate", value)
}

// Formtarget Specifies where to display the response after submitting the form.
//
// Output: formtarget="{value}"
func Formtarget(value string) Node {
	return Attr("formtarget", value)
}

// Headers Specifies one or more header cells a cell is related to.
//
// Output: headers="{value}"
func Headers(value string) Node {
	return Attr("headers", value)
}

// Height Specifies the height of the element.
//
// Output: height="{value}"
func Height(value string) Node {
	return Attr("height", value)
}

// Hidden Specifies that an element is not yet, or is no longer, relevant.
//
// Output: hidden="{value}"
func Hidden(value string) Node {
	return Attr("hidden", value)
}

// High Specifies the range that is considered to be a high value.
//
// Output: high="{value}"
func High(value string) Node {
	return Attr("high", value)
}

// Href Specifies the URL of the page the link goes to.
//
// Output: href="{value}"
func Href(value string) Node {
	return Attr("href", value)
}

// Hreflang Specifies the language of the linked document.
//
// Output: hreflang="{value}"
func Hreflang(value string) Node {
	return Attr("hreflang", value)
}

// HttpEquiv Provides an HTTP header for the information/value of the content attribute.
//
// Output: http-equiv="{value}"
func HttpEquiv(value string) Node {
	return Attr("http-equiv", value)
}

// Icon Specifies an icon for the command.
//
// Output: icon="{value}"
func Icon(value string) Node {
	return Attr("icon", value)
}

// Id Specifies a unique id for an element.
//
// Output: id="{value}"
func Id(value string) Node {
	return Attr("id", value)
}

// Importance Indicates the relative fetch priority for the resource.
//
// Output: importance="{value}"
func Importance(value string) Node {
	return Attr("importance", value)
}

// Integrity Allows a browser to verify the fetched resource's integrity.
//
// Output: integrity="{value}"
func Integrity(value string) Node {
	return Attr("integrity", value)
}

// Ismap Specifies an image as a server-side image-map.
//
// Output: ismap="{value}"
func Ismap(value string) Node {
	return Attr("ismap", value)
}

// Itemprop Defines a property of an item.
//
// Output: itemprop="{value}"
func Itemprop(value string) Node {
	return Attr("itemprop", value)
}

// Keytype Specifies the security algorithm of a key.
//
// Output: keytype="{value}"
func Keytype(value string) Node {
	return Attr("keytype", value)
}

// Kind Specifies the kind of text track.
//
// Output: kind="{value}"
func Kind(value string) Node {
	return Attr("kind", value)
}

// LabelAttr Specifies the title of the text track.
//
// Output: label="{value}"
func LabelAttr(value string) Node {
	return Attr("label", value)
}

// Lang Specifies the language of the element's content.
//
// Output: lang="{value}"
func Lang(value string) Node {
	return Attr("lang", value)
}

// Language Deprecated. Specifies the scripting language used for the script.
//
// Output: language="{value}"
func Language(value string) Node {
	return Attr("language", value)
}

// Loading Indicates how the browser should load the image or iframe.
//
// Output: loading="{value}"
func Loading(value string) Node {
	return Attr("loading", value)
}

// List Refers to a datalist element that contains pre-defined options.
//
// Output: list="{value}"
func List(value string) Node {
	return Attr("list", value)
}

// Loop Specifies that the audio/video will start over again, every time it is finished.
//
// Output: loop="{value}"
func Loop(value string) Node {
	return Attr("loop", value)
}

// Low Specifies the range that is considered to be a low value.
//
// Output: low="{value}"
func Low(value string) Node {
	return Attr("low", value)
}

// Manifest Specifies the URL of the document's cache manifest.
//
// Output: manifest="{value}"
func Manifest(value string) Node {
	return Attr("manifest", value)
}

// Max Specifies the maximum value.
//
// Output: max="{value}"
func Max(value string) Node {
	return Attr("max", value)
}

// Maxlength Specifies the maximum number of characters allowed in an input field.
//
// Output: maxlength="{value}"
func Maxlength(value string) Node {
	return Attr("maxlength", value)
}

// Media Specifies what media/device the linked document is optimized for.
//
// Output: media="{value}"
func Media(value string) Node {
	return Attr("media", value)
}

// Method Specifies the HTTP method to use when sending form-data.
//
// Output: method="{value}"
func Method(value string) Node {
	return Attr("method", value)
}

// Min Specifies the minimum value.
//
// Output: min="{value}"
func Min(value string) Node {
	return Attr("min", value)
}

// Minlength Specifies the minimum number of characters required in an input field.
//
// Output: minlength="{value}"
func Minlength(value string) Node {
	return Attr("minlength", value)
}

// Multiple Specifies that a user can enter more than one value.
//
// Output: multiple="{value}"
func Multiple(value string) Node {
	return Attr("multiple", value)
}

// Muted Specifies that the audio output should be muted.
//
// Output: muted="{value}"
func Muted(value string) Node {
	return Attr("muted", value)
}

// Name Specifies the name of the element.
//
// Output: name="{value}"
func Name(value string) Node {
	return Attr("name", value)
}

// Nomodule Indicates that the script should not be executed in browsers that support module scripts.
//
// Output: nomodule="{value}"
func Nomodule(value string) Node {
	return Attr("nomodule", value)
}

// Nonce A cryptographic nonce used in Content Security Policy.
//
// Output: nonce="{value}"
func Nonce(value string) Node {
	return Attr("nonce", value)
}

// Novalidate Specifies that the form should not be validated when submitted.
//
// Output: novalidate="{value}"
func Novalidate(value string) Node {
	return Attr("novalidate", value)
}

// Open Specifies that the details should be visible to the user.
//
// Output: open="{value}"
func Open(value string) Node {
	return Attr("open", value)
}

// Optimum Specifies the optimal value of the gauge.
//
// Output: optimum="{value}"
func Optimum(value string) Node {
	return Attr("optimum", value)
}

// Pattern Specifies a regular expression that the input element's value is checked against.
//
// Output: pattern="{value}"
func Pattern(value string) Node {
	return Attr("pattern", value)
}

// Ping Specifies a space-separated list of URLs to be notified if a user follows the hyperlink.
//
// Output: ping="{value}"
func Ping(value string) Node {
	return Attr("ping", value)
}

// Placeholder Specifies a short hint that describes the expected value of an input field.
//
// Output: placeholder="{value}"
func Placeholder(value string) Node {
	return Attr("placeholder", value)
}

// Playsinline Indicates that the video should play inline on mobile devices.
//
// Output: playsinline="{value}"
func Playsinline(value string) Node {
	return Attr("playsinline", value)
}

// Poster Specifies an image to be shown while the video is downloading or until the user hits the play button.
//
// Output: poster="{value}"
func Poster(value string) Node {
	return Attr("poster", value)
}

// Preload Specifies if and how the author thinks the audio/video should be loaded when the page loads.
//
// Output: preload="{value}"
func Preload(value string) Node {
	return Attr("preload", value)
}

// Readonly Specifies that the input field is read-only.
//
// Output: readonly="{value}"
func Readonly(value string) Node {
	return Attr("readonly", value)
}

// Referrerpolicy Specifies which referrer information to send when fetching a resource.
//
// Output: referrerpolicy="{value}"
func Referrerpolicy(value string) Node {
	return Attr("referrerpolicy", value)
}

// Rel Specifies the relationship between the current document and the linked document.
//
// Output: rel="{value}"
func Rel(value string) Node {
	return Attr("rel", value)
}

// Required Specifies that the input field must be filled out before submitting the form.
//
// Output: required="{value}"
func Required(value string) Node {
	return Attr("required", value)
}

// Reversed Specifies that the list order should be descending (9,8,7...).
//
// Output: reversed="{value}"
func Reversed(value string) Node {
	return Attr("reversed", value)
}

// Rows Specifies the visible number of lines in a text area.
//
// Output: rows="{value}"
func Rows(value string) Node {
	return Attr("rows", value)
}

// Rowspan Specifies the number of rows a cell should span.
//
// Output: rowspan="{value}"
func Rowspan(value string) Node {
	return Attr("rowspan", value)
}

// Sandbox Enables an extra set of restrictions for the content in an iframe.
//
// Output: sandbox="{value}"
func Sandbox(value string) Node {
	return Attr("sandbox", value)
}

// Scope Specifies whether a header cell is a header for a column, row, or group of columns or rows.
//
// Output: scope="{value}"
func Scope(value string) Node {
	return Attr("scope", value)
}

// Scoped Specifies that the styles only apply to this element's parent and child elements.
//
// Output: scoped="{value}"
func Scoped(value string) Node {
	return Attr("scoped", value)
}

// Selected Specifies that an option should be pre-selected when the page loads.
//
// Output: selected="{value}"
func Selected(value string) Node {
	return Attr("selected", value)
}

// Shape Specifies the shape of an area in an image-map.
//
// Output: shape="{value}"
func Shape(value string) Node {
	return Attr("shape", value)
}

// Size Specifies the width, in characters, of an input field.
//
// Output: size="{value}"
func Size(value string) Node {
	return Attr("size", value)
}

// Sizes Specifies the sizes of icons for visual media.
//
// Output: sizes="{value}"
func Sizes(value string) Node {
	return Attr("sizes", value)
}

// SlotAttr Assigns a slot in a shadow DOM shadow tree.
//
// Output: slot="{value}"
func SlotAttr(value string) Node {
	return Attr("slot", value)
}

// SpanAttr Defines the number of columns to span for a col or colgroup element.
//
// Output: span="{value}"
func SpanAttr(value string) Node {
	return Attr("span", value)
}

// Spellcheck Specifies whether the element is to have its spelling and grammar checked or not.
//
// Output: spellcheck="{value}"
func Spellcheck(value string) Node {
	return Attr("spellcheck", value)
}

// Src Specifies the URL of the media file.
//
// Output: src="{value}"
func Src(value string) Node {
	return Attr("src", value)
}

// Srcdoc Specifies the HTML content of the page to show in the iframe.
//
// Output: srcdoc="{value}"
func Srcdoc(value string) Node {
	return Attr("srcdoc", value)
}

// Srclang Specifies the language of the track text data (required if kind='subtitles').
//
// Output: srclang="{value}"
func Srclang(value string) Node {
	return Attr("srclang", value)
}

// Srcset Specifies the URL of the image to use in different situations.
//
// Output: srcset="{value}"
func Srcset(value string) Node {
	return Attr("srcset", value)
}

// Start Specifies the start value of an ordered list.
//
// Output: start="{value}"
func Start(value string) Node {
	return Attr("start", value)
}

// Step Specifies the legal number intervals for an input field.
//
// Output: step="{value}"
func Step(value string) Node {
	return Attr("step", value)
}

// StyleAttr Specifies an inline CSS style for an element.
//
// Output: style="{value}"
func StyleAttr(value string) Node {
	return Attr("style", value)
}

// SummaryAttr Specifies a summary of the content of a table (deprecated in HTML5).
//
// Output: summary="{value}"
func SummaryAttr(value string) Node {
	return Attr("summary", value)
}

// Tabindex Specifies the tabbing order of an element.
//
// Output: tabindex="{value}"
func Tabindex(value string) Node {
	return Attr("tabindex", value)
}

// Target Specifies where to open the linked document.
//
// Output: target="{value}"
func Target(value string) Node {
	return Attr("target", value)
}

// TitleAttr Specifies extra information about an element.
//
// Output: title="{value}"
func TitleAttr(value string) Node {
	return Attr("title", value)
}

// Translate Specifies whether the content of an element should be translated or not.
//
// Output: translate="{value}"
func Translate(value string) Node {
	return Attr("translate", value)
}

// Type Specifies the type of element.
//
// Output: type="{value}"
func Type(value string) Node {
	return Attr("type", value)
}

// Usemap Specifies an image as a client-side image-map.
//
// Output: usemap="{value}"
func Usemap(value string) Node {
	return Attr("usemap", value)
}

// Value Specifies the value of the element.
//
// Output: value="{value}"
func Value(value string) Node {
	return Attr("value", value)
}

// Width Specifies the width of the element.
//
// Output: width="{value}"
func Width(value string) Node {
	return Attr("width", value)
}

// Wrap Specifies how the text in a text area is to be wrapped when submitted in a form.
//
// Output: wrap="{value}"
func Wrap(value string) Node {
	return Attr("wrap", value)
}

// Aria Defines accessibility semantics or ARIA properties.
//
// Output: aria-{key}="{value}"
func Aria(key string, value string) Node {
	return Attr("aria-"+key, value)
}

// Data Used to store custom data private to the page or application.
//
// Output: data-{key}="{value}"
func Data(key string, value string) Node {
	return Attr("data-"+key, value)
}

// Role Defines the role of an element for accessibility purposes.
//
// Output: role="{value}"
func Role(value string) Node {
	return Attr("role", value)
}
